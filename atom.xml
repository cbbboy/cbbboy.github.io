<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>自定义隧道</title>
  
  <subtitle>自定义隧道</subtitle>
  <link href="https://cbbboy.github.io/atom.xml" rel="self"/>
  
  <link href="https://cbbboy.github.io/"/>
  <updated>2023-10-19T08:26:49.377Z</updated>
  <id>https://cbbboy.github.io/</id>
  
  <author>
    <name>cbb boy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>隧道基础01-标准协议</title>
    <link href="https://cbbboy.github.io/zh-CN/%E9%9A%A7%E9%81%93/%E9%9A%A7%E9%81%93%E5%9F%BA%E7%A1%8001-%E6%A0%87%E5%87%86%E5%8D%8F%E8%AE%AE/"/>
    <id>https://cbbboy.github.io/zh-CN/%E9%9A%A7%E9%81%93/%E9%9A%A7%E9%81%93%E5%9F%BA%E7%A1%8001-%E6%A0%87%E5%87%86%E5%8D%8F%E8%AE%AE/</id>
    <published>2023-10-12T02:08:59.000Z</published>
    <updated>2023-10-19T08:26:49.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标准协议"><a href="#标准协议" class="headerlink" title="标准协议"></a>标准协议</h1><p>tcp、udp、ssh、http、vmess、vless、tls、dns、grpc他们的区别与联系</p><h4 id="这个是wireshark的抓包界面，那分别代表什么意思呢"><a href="#这个是wireshark的抓包界面，那分别代表什么意思呢" class="headerlink" title="这个是wireshark的抓包界面，那分别代表什么意思呢"></a>这个是wireshark的抓包界面，那分别代表什么意思呢</h4><p><img src="/./assets/image-20231018161938045.png" alt="image-20231018161938045"></p><ol><li>1 代表的是所有数据包，默认按时间排序当1选中数据包后 2、3会显示详细信息</li><li>2代表的是wireshar将数据包解析后人为能读懂的内容，像圈中的Protocol：TCP不是数据包中的内容，是wireshark根据数据包3中圈出位置的字符翻译出他代表的含义</li><li>3代表的是原始数据包，即网络上传输的内容，一般我们自己是无法读懂的，一般都看2中的内容</li></ol><h4 id="这个是一个tls协议的流量，他同时也叫tcp，为什么会这样呢？"><a href="#这个是一个tls协议的流量，他同时也叫tcp，为什么会这样呢？" class="headerlink" title="这个是一个tls协议的流量，他同时也叫tcp，为什么会这样呢？"></a>这个是一个tls协议的流量，他同时也叫tcp，为什么会这样呢？</h4><p><img src="/./assets/image-20231009150057338.png" alt="image-20231009150057338"></p><p>看这个wireshark抓包的protocol，这个06代表的即是tcp协议</p><h4 id="那为什么又会叫tls协议呢？"><a href="#那为什么又会叫tls协议呢？" class="headerlink" title="那为什么又会叫tls协议呢？"></a>那为什么又会叫tls协议呢？</h4><p>tcp上承载的数据内容是tls的流量，所以叫做tls</p><p><img src="/./assets/image-20231009150502621.png" alt="image-20231009150502621"></p><p>这个时候我们就能很清晰的认识到</p><p>协议分成tcp，udp，icmp</p><p>tcp会根据承载的数据分成http、tls、ssh等</p><p>udp会有dns、quic、arp等</p><h4 id="那除了tcp是6、udp是多少呢？除了tcp和udp还会有其他什么协议？"><a href="#那除了tcp是6、udp是多少呢？除了tcp和udp还会有其他什么协议？" class="headerlink" title="那除了tcp是6、udp是多少呢？除了tcp和udp还会有其他什么协议？"></a>那除了tcp是6、udp是多少呢？除了tcp和udp还会有其他什么协议？</h4><p>协议列表官方文档</p><p><a href="https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml</a></p><p><img src="/./assets/image-20231018161050135.png" alt="image-20231018161050135"></p><p>有很多，不过目前只有tcp、udp、icmp允许在公网上传输，内网允许部分协议</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;标准协议&quot;&gt;&lt;a href=&quot;#标准协议&quot; class=&quot;headerlink&quot; title=&quot;标准协议&quot;&gt;&lt;/a&gt;标准协议&lt;/h1&gt;&lt;p&gt;tcp、udp、ssh、http、vmess、vless、tls、dns、grpc他们的区别与联系&lt;/p&gt;
&lt;h4 id=&quot;</summary>
      
    
    
    
    
    <category term="隧道" scheme="https://cbbboy.github.io/tags/%E9%9A%A7%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>隧道基础02-点对点隧道</title>
    <link href="https://cbbboy.github.io/zh-CN/%E9%9A%A7%E9%81%93/%E9%9A%A7%E9%81%93%E5%9F%BA%E7%A1%8002-%E7%82%B9%E5%AF%B9%E7%82%B9%E9%9A%A7%E9%81%93/"/>
    <id>https://cbbboy.github.io/zh-CN/%E9%9A%A7%E9%81%93/%E9%9A%A7%E9%81%93%E5%9F%BA%E7%A1%8002-%E7%82%B9%E5%AF%B9%E7%82%B9%E9%9A%A7%E9%81%93/</id>
    <published>2023-10-12T02:08:59.000Z</published>
    <updated>2023-10-19T08:24:15.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="点对点隧道"><a href="#点对点隧道" class="headerlink" title="点对点隧道"></a>点对点隧道</h1><h4 id="隧道是什么？"><a href="#隧道是什么？" class="headerlink" title="隧道是什么？"></a>隧道是什么？</h4><p>打通网络的即可叫隧道</p><h4 id="如何实现点对点普通隧道？"><a href="#如何实现点对点普通隧道？" class="headerlink" title="如何实现点对点普通隧道？"></a>如何实现点对点普通隧道？</h4><p>我们可以这样</p><p><img src="/./assets/image-20231009153212605.png" alt="image-20231009153212605"></p><h4 id="那我们如何go代码实现？"><a href="#那我们如何go代码实现？" class="headerlink" title="那我们如何go代码实现？"></a>那我们如何go代码实现？</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:8888&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listen.Close()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn, err := listen.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> processClient(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">processClient</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">dial, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;10.50.1.220:9000&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> dial.Close()</span><br><span class="line">io.Copy(dial, conn)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">io.Copy(conn, dial)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server 部署在10.50.1.220上</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;0.0.0.0:9000&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listen.Close()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn, err := listen.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> processServer(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">processServer</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="comment">//dial, err := net.Dial(&quot;tcp&quot;, &quot;172.31.255.10:8643&quot;)</span></span><br><span class="line">dial, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;10.50.1.18:8088&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> dial.Close()</span><br><span class="line">io.Copy(dial, conn)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">io.Copy(conn, dial)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在浏览器上输入<a href="http://127.0.0.1:8888/%E5%90%8E">http://127.0.0.1:8888/后</a></p><p><img src="/./assets/image-20231009155008216.png" alt="image-20231009155008216"></p><p>通过抓包我们可以看见我们希望访问10.50.1.18:8088的流量直接发给了10.50.1.220，而且是明文直接发送</p><h4 id="普通隧道可以看见其中的访问内容，我们可以使用tls进行加密？"><a href="#普通隧道可以看见其中的访问内容，我们可以使用tls进行加密？" class="headerlink" title="普通隧道可以看见其中的访问内容，我们可以使用tls进行加密？"></a>普通隧道可以看见其中的访问内容，我们可以使用tls进行加密？</h4><p><img src="/assets/image-20231009154310097.png" alt="image-20231009154310097"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/tls&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:8888&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listen.Close()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn, err := listen.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> processClientTLS(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">processClientTLS</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">cfg := &amp;tls.Config&#123;</span><br><span class="line">InsecureSkipVerify: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line">dial, err := tls.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;10.50.1.220:9000&quot;</span>, cfg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> dial.Close()</span><br><span class="line">io.Copy(dial, conn)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">io.Copy(conn, dial)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server 部署在220上</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/tls&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cer := <span class="string">&quot;-----BEGIN CERTIFICATE-----\nMIICyjCCAiugAwIBAgIFAPb/7TwwCgYIKoZIzj0EAwQwUzEOMAwGA1UEBhMFQ2hp\nbmExDzANBgNVBAgTBkZ1SmlhbjEPMA0GA1UEBxMGWGlhbWVuMRAwDgYDVQQKEwdH\nb3Byb3h5MQ0wCwYDVQQDEwRNYXJzMB4XDTIyMDkwNzEwMTEzNVoXDTI0MDkwNzEw\nMTEzNVowWjEOMAwGA1UEBhMFQ2hpbmExDzANBgNVBAgTBkZ1SmlhbjEPMA0GA1UE\nBxMGWGlhbWVuMRAwDgYDVQQKEwdHb3Byb3h5MRQwEgYDVQQDEwthaXRydXN0LmNv\nbTCBmzAQBgcqhkjOPQIBBgUrgQQAIwOBhgAEAE03TmHvLk4/EmYQGonQh/iz2Okn\nsK5OLTqyUOe4jDyKW1My8zqt/7AkkHzdoA8A3DOH+gySKAcjBxOIT5ZqTDMVAG6m\nmtjlRwLOCxccDLquoFzvX9lQK+IPki+PFjH3WRgYs2Jiv6ofrG162ft1Rcb0TNw9\n48T5jgAOedYL1be5cVRIo4GhMIGeMA4GA1UdDwEB/wQEAwIEsDAdBgNVHSUEFjAU\nBggrBgEFBQcDAgYIKwYBBQUHAwEwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBQw\nUaeLynxNMmzhJq9074d8Uotc1TA+BgNVHREENzA1gg0qLmFpdHJ1c3QuY29tggth\naXRydXN0LmNvbYEXcWluZ3FpYW5sdWRhb0BnbWFpbC5jb20wCgYIKoZIzj0EAwQD\ngYwAMIGIAkIBX+BsZKzV7pCJ+xrIxEJtY4oj6iKxg4boqZwHv/WSKKTiEB+SRaK8\nmbczk4TI2D+//FNwnDL6NMcoQeDVkGQYdPsCQgEzITLy8y6CugwqOgtK+F+wRIXs\ntPPBmcfyxzmarDDlGBgmUmwT06ksBOWmbaNvWODXAxvpxOx/lSza7rFpamf8lQ==\n-----END CERTIFICATE-----\n&quot;</span></span><br><span class="line">key := <span class="string">&quot;-----BEGIN EC PRIVATE KEY-----\nMIHcAgEBBEIBSSumcBKzmWrzFCC+Sjz2bxapycjUn21EAtjI9W1byE6oyqmsgRiH\nuLeM2T09+7CIa1ykePHcbiWmgRw50RJyGiOgBwYFK4EEACOhgYkDgYYABABNN05h\n7y5OPxJmEBqJ0If4s9jpJ7CuTi06slDnuIw8iltTMvM6rf+wJJB83aAPANwzh/oM\nkigHIwcTiE+WakwzFQBupprY5UcCzgsXHAy6rqBc71/ZUCviD5IvjxYx91kYGLNi\nYr+qH6xtetn7dUXG9EzcPePE+Y4ADnnWC9W3uXFUSA==\n-----END EC PRIVATE KEY-----\n&quot;</span></span><br><span class="line">keyPair, err := tls.X509KeyPair([]<span class="type">byte</span>(cer), []<span class="type">byte</span>(key))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(fmt.Sprintf(<span class="string">&quot;load basic config error:%v&quot;</span>, err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cfg := &amp;tls.Config&#123;</span><br><span class="line">Certificates: []tls.Certificate&#123;keyPair&#125;,</span><br><span class="line">CipherSuites: []<span class="type">uint16</span>&#123;</span><br><span class="line">tls.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,</span><br><span class="line">tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,</span><br><span class="line">tls.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,</span><br><span class="line">tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,</span><br><span class="line">tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,</span><br><span class="line">tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,</span><br><span class="line">tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,</span><br><span class="line">tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,</span><br><span class="line">&#125;,</span><br><span class="line">MinVersion: tls.VersionTLS12,</span><br><span class="line">MaxVersion: tls.VersionTLS13,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">listen, err := tls.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;0.0.0.0:9000&quot;</span>, cfg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listen.Close()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn, err := listen.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> processServerTLS(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">processServerTLS</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="comment">//dial, err := net.Dial(&quot;tcp&quot;, &quot;172.31.255.10:8643&quot;)</span></span><br><span class="line">dial, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;10.50.1.18:8088&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> dial.Close()</span><br><span class="line">io.Copy(dial, conn)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">io.Copy(conn, dial)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在浏览器上输入<a href="http://127.0.0.1:8888/%E5%90%8E">http://127.0.0.1:8888/后</a></p><p><img src="/assets/image-20231009160451882.png" alt="image-20231009160451882"></p><p>即可发现我们的隧道已经是tls加密隧道了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;点对点隧道&quot;&gt;&lt;a href=&quot;#点对点隧道&quot; class=&quot;headerlink&quot; title=&quot;点对点隧道&quot;&gt;&lt;/a&gt;点对点隧道&lt;/h1&gt;&lt;h4 id=&quot;隧道是什么？&quot;&gt;&lt;a href=&quot;#隧道是什么？&quot; class=&quot;headerlink&quot; title=&quot;隧</summary>
      
    
    
    
    
    <category term="隧道" scheme="https://cbbboy.github.io/tags/%E9%9A%A7%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>隧道进阶02-虚拟网卡-&gt;用户态处理数据包（选学）</title>
    <link href="https://cbbboy.github.io/zh-CN/%E9%9A%A7%E9%81%93/%E9%9A%A7%E9%81%93%E8%BF%9B%E9%98%B602-%E8%99%9A%E6%8B%9F%E7%BD%91%E5%8D%A1-%3E%E7%94%A8%E6%88%B7%E6%80%81%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E5%8C%85/"/>
    <id>https://cbbboy.github.io/zh-CN/%E9%9A%A7%E9%81%93/%E9%9A%A7%E9%81%93%E8%BF%9B%E9%98%B602-%E8%99%9A%E6%8B%9F%E7%BD%91%E5%8D%A1-%3E%E7%94%A8%E6%88%B7%E6%80%81%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E5%8C%85/</id>
    <published>2023-10-12T02:08:59.000Z</published>
    <updated>2023-10-19T08:24:41.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚拟网卡-用户态处理数据包（选学）"><a href="#虚拟网卡-用户态处理数据包（选学）" class="headerlink" title="虚拟网卡-&gt;用户态处理数据包（选学）"></a>虚拟网卡-&gt;用户态处理数据包（选学）</h1><p><img src="/./assets/image-20231019110018175.png" alt="image-20231019110018175"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[0 0 0 2 69 0 0 64 0 0 64 0 64 6 187 109 114 2 2 2 10 50 1 21 213 33 33 194 64 111 123 227 0 0 0 0 176 194 255 255 98 116 0 0 2 4 5 180 1 3 3 6 1 1 8 10 164 164 252 161 0 0 0 0]</span><br><span class="line">[0 0 0 2 69 0 0 52 0 0 64 0 64 6 187 121 114 2 2 2 10 50 1 21 213 33 33 194 64 111 123 228 42 158 136 94 128 16 8 10 200 227 0 0 1 1 8 10 164 164 252 161]</span><br><span class="line">TCP remote addr:114.2.2.2:54561 local addr:10.50.1.21:8642</span><br><span class="line">[0 0 0 2 69 0 2 115 0 0 64 0 64 6 185 58 114 2 2 2 10 50 1 21 213 33 33 194 64 111 123 228 42 158 136 94 128 24 8 10 155 230 0 0 1 1 8 10 164 164 252 161 232 239 54 26 22 3 1 2 58 1 0 2 54 3 3 213 0 12 255 249 102 134 132 101 124 128 48 20 100 86 18 88 207 47 241 137 186 227 39 60 14 194 87 94 193 139 42 32 200 37 156 47 156 44 208 214 206 4 89 171 36 97 9 167 208 95 200 238 249 231 36 15 101 174 211 104 192 209 0 86 0 32 26 26 19 1 19 2 19 3 192 43 192 47 192 44 192 48 204 169 204 168 192 19 192 20 0 156 0 157 0 47 0 53 1 0 1 205 154 154 0 0 0 16 0 14 0 12 2 104 50 8 104 116 116 112 47 49 46 49 0 27 0 3 2 0 2 68 105 0 5 0 3 2 104 50 0 43 0 7 6 202 202 3 4 3 3 0 5 0 5 1 0 0 0 0 254 13 1 26 0 0 1 0 1 129 0 32 170 238 163 38 173 14 155 27 89 147 241 9 126 118 6 128 223 123 232 113 153 203 158 208 106 37 176 86 33 167 155 86 0 240 118 64 149 34 5 159 87 207 0 9 219 225 22 183 179 221 31 168 252 38 58 77 147 155 233 254 62 110 39 111 202 12 58 99 171 174 96 43 181 128 226 214 247 158 227 211 185 149 14 135 115 29 165 91 208 208 106 250 60 142 202 218 6 86 18 98 198 31 180 155 229 23 229 229 102 111 33 116 85 19 251 174 68 170 253 5 86 6 58 2 98 116 252 177 33 210 90 237 103 68 75 46 1 10 128 125 36 123 253 242 21 112 250 92 242 68 104 129 23 107 159 148 25 61 148 109 165 0 73 116 221 23 82 180 75 172 237 185 155 35 1 184 96 230 12 121 247 1 151 244 122 171 219 108 106 192 24 165 230 243 242 203 77 189 65 122 5 64 151 52 24 138 96 99 103 243 234 174 59 122 163 83 60 118 182 61 157 132 88 234 160 209 33 218 151 17 150 151 196 35 151 114 236 30 34 101 88 225 148 23 173 213 251 120 124 200 35 233 157 200 134 179 123 168 24 170 48 234 8 209 86 53 233 37 124 66 205 169 56 248 255 1 0 1 0 0 11 0 2 1 0 0 45 0 2 1 1 0 35 0 0 0 18 0 0 0 10 0 10 0 8 26 26 0 29 0 23 0 24 0 23 0 0 0 51 0 43 0 41 26 26 0 1 0 0 29 0 32 22 53 48 118 65 49 40 66 186 23 119 101 227 113 7 136 143 154 165 41 180 43 45 226 116 206 187 9 178 181 183 73 0 13 0 18 0 16 4 3 8 4 4 1 5 3 8 5 5 1 8 6 6 1 74]</span><br><span class="line">[0 0 0 2 69 0 0 52 0 0 64 0 64 6 187 121 114 2 2 2 10 50 1 21 213 33 33 194 64 111 126 35 42 158 136 95 128 16 8 10 198 161 0 0 1 1 8 10 164 164 252 162]</span><br><span class="line">[0 0 0 2 69 0 0 52 0 0 64 0 64 6 187 121 114 2 2 2 10 50 1 21 213 33 33 194 64 111 126 35 42 158 136 95 128 17 8 10 198 160 0 0 1 1 8 10 164 164 252 162]</span><br><span class="line">[0 0 0 2 69 0 0 64 0 0 64 0 64 6 187 109 114 2 2 2 10 50 1 21 213 34 33 194 183 63 153 236 0 0 0 0 176 194 255 255 245 98 0 0 2 4 5 180 1 3 3 6 1 1 8 10 117 195 3 186 0 0 0 0]</span><br><span class="line">[0 0 0 2 69 0 0 52 0 0 64 0 64 6 187 121 114 2 2 2 10 50 1 21 213 34 33 194 183 63 153 237 253 141 223 237 128 16 8 10 49 82 0 0 1 1 8 10 117 195 3 186]</span><br><span class="line">[0 0 0 2 69 0 2 115 0 0 64 0 64 6 185 58 114 2 2 2 10 50 1 21 213 34 33 194 183 63 153 237 253 141 223 237 128 24 8 10 124 97 0 0 1 1 8 10 117 195 3 186 232 239 54 27 22 3 1 2 58 1 0 2 54 3 3 219 109 171 30 37 38 4 112 212 185 197 155 163 81 76 78 145 199 137 23 208 56 147 89 222 89 217 112 28 75 58 105 32 70 83 17 62 141 9 73 95 229 81 87 234 32 188 237 17 232 210 240 168 203 189 115 211 21 192 69 238 251 73 215 148 0 32 90 90 19 1 19 2 19 3 192 43 192 47 192 44 192 48 204 169 204 168 192 19 192 20 0 156 0 157 0 47 0 53 1 0 1 205 186 186 0 0 0 16 0 14 0 12 2 104 50 8 104 116 116 112 47 49 46 49 0 10 0 10 0 8 10 10 0 29 0 23 0 24 0 45 0 2 1 1 68 105 0 5 0 3 2 104 50 254 13 1 26 0 0 1 0 1 51 0 32 54 249 207 198 26 79 147 70 105 48 182 193 92 208 17 209 220 75 230 64 162 165 113 106 28 17 164 83 182 64 117 72 0 240 2 187 134 250 170 155 196 234 221 48 133 111 84 63 207 172 119 137 43 123 235 160 78 137 180 30 139 165 58 39 122 5 246 148 108 48 134 141 175 207 62 155 209 239 159 213 175 105 99 165 102 226 74 174 186 69 149 167 188 13 46 48 57 109 114 155 99 231 17 139 182 21 160 172 54 222 132 54 9 19 165 22 203 244 26 33 35 197 123 204 54 216 218 22 122 239 173 148 26 167 69 222 14 250 136 248 226 166 43 124 129 65 65 38 185 149 196 16 121 1 78 64 173 21 87 250 197 35 212 138 220 44 67 101 194 13 56 95 111 141 236 230 139 215 99 52 89 97 48 10 188 163 151 33 159 139 78 166 129 190 42 190 150 10 189 176 147 172 173 71 99 214 122 116 35 76 185 26 25 30 21 239 184 100 124 223 233 171 205 94 28 85 198 52 107 235 136 239 13 144 102 52 197 160 226 1 39 75 125 156 2 127 232 167 245 110 93 202 85 157 105 144 73 113 15 103 103 141 50 37 55 87 71 190 43 11 136 223 43 235 0 43 0 7 6 42 42 3 4 3 3 0 13 0 18 0 16 4 3 8 4 4 1 5 3 8 5 5 1 8 6 6 1 0 35 0 0 255 1 0 1 0 0 5 0 5 1 0 0 0 0 0 51 0 43 0 41 10 10 0 1 0 0 29 0 32 137 49 252 31 150 45 111 81 239 225 56 226 210 130 37 110 187 8 16 164 134 217 20 207 148 3 189 255 82 60 48 77 0 27 0 3 2 0 2 0 11 0 2 1 0 0 23 0 0 0 18 0 0 106]</span><br><span class="line">TCP remote addr:114.2.2.2:54562 local addr:10.50.1.21:8642</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./assets/image-20231019110103861.png" alt="image-20231019110103861"></p><p>只看第一个数据包</p><p><img src="/./assets/image-20231019110232757.png" alt="image-20231019110232757"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[0 0 0 2 69 0 0 64 0 0 64 0 64 6 187 109 114 2 2 2 10 50 1 21 213 33 33 194 64 111 123 227 0 0 0 0 176 194 255 255 98 116 0 0 2 4 5 180 1 3 3 6 1 1 8 10 164 164 252 161 0 0 0 0]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./assets/image-20231019110937382.png" alt="image-20231019110937382"></p><p>后4位是虚拟网卡自己处理了，不是真实的数据</p><h4 id="这个时候我们拿到的net-conn对象打印出来的数据"><a href="#这个时候我们拿到的net-conn对象打印出来的数据" class="headerlink" title="这个时候我们拿到的net.conn对象打印出来的数据"></a>这个时候我们拿到的net.conn对象打印出来的数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TCP remote addr:114.2.2.2:54561 local addr:10.50.1.21:8642</span><br><span class="line"></span><br><span class="line">可以看到remote是utun80的虚拟地址，而local是真实的业务地址，和我们理解的反了过来</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;虚拟网卡-用户态处理数据包（选学）&quot;&gt;&lt;a href=&quot;#虚拟网卡-用户态处理数据包（选学）&quot; class=&quot;headerlink&quot; title=&quot;虚拟网卡-&amp;gt;用户态处理数据包（选学）&quot;&gt;&lt;/a&gt;虚拟网卡-&amp;gt;用户态处理数据包（选学）&lt;/h1&gt;&lt;p&gt;&lt;i</summary>
      
    
    
    
    
    <category term="隧道" scheme="https://cbbboy.github.io/tags/%E9%9A%A7%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>隧道基础03-自定义协议</title>
    <link href="https://cbbboy.github.io/zh-CN/%E9%9A%A7%E9%81%93/%E9%9A%A7%E9%81%93%E5%9F%BA%E7%A1%8003-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%8F%E8%AE%AE/"/>
    <id>https://cbbboy.github.io/zh-CN/%E9%9A%A7%E9%81%93/%E9%9A%A7%E9%81%93%E5%9F%BA%E7%A1%8003-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%8F%E8%AE%AE/</id>
    <published>2023-10-12T02:08:59.000Z</published>
    <updated>2023-10-19T11:55:50.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义协议"><a href="#自定义协议" class="headerlink" title="自定义协议"></a>自定义协议</h1><p>我们有http的协议，有tls协议</p><h4 id="那我们能不能自己做一个标准协议呢？"><a href="#那我们能不能自己做一个标准协议呢？" class="headerlink" title="那我们能不能自己做一个标准协议呢？"></a>那我们能不能自己做一个标准协议呢？</h4><p>我们就先做一个简单的</p><p>使用前4个字节当作长度，后面传递其真实内容</p><p>x x x x hello!</p><p>解析的时候每次先读取4个字节长度后续判断内容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// protocol.go</span></span><br><span class="line"><span class="keyword">package</span> protocol</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Encode 将消息编码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Encode</span><span class="params">(message []<span class="type">byte</span>)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">/*// 读取消息的长度，转换成int32类型（占4个字节）</span></span><br><span class="line"><span class="comment">var length = int32(len(message))</span></span><br><span class="line"><span class="comment">var pkg = new(bytes.Buffer)</span></span><br><span class="line"><span class="comment">// 写入消息头</span></span><br><span class="line"><span class="comment">err := binary.Write(pkg, binary.LittleEndian, length)</span></span><br><span class="line"><span class="comment">if err != nil &#123;</span></span><br><span class="line"><span class="comment">return nil, err</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">// 写入消息实体</span></span><br><span class="line"><span class="comment">err = binary.Write(pkg, binary.LittleEndian, []byte(message))</span></span><br><span class="line"><span class="comment">if err != nil &#123;</span></span><br><span class="line"><span class="comment">return nil, err</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">return pkg.Bytes(), nil*/</span></span><br><span class="line">protocolPre := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">4</span>)</span><br><span class="line">protocolPre[<span class="number">0</span>] = <span class="type">byte</span>(<span class="built_in">len</span>(message))</span><br><span class="line">protocolPre[<span class="number">1</span>] = <span class="type">byte</span>(<span class="built_in">len</span>(message) &gt;&gt; <span class="number">8</span>)</span><br><span class="line">protocolPre[<span class="number">2</span>] = <span class="type">byte</span>(<span class="built_in">len</span>(message) &gt;&gt; <span class="number">16</span>)</span><br><span class="line">protocolPre[<span class="number">3</span>] = <span class="type">byte</span>(<span class="built_in">len</span>(message) &gt;&gt; <span class="number">24</span>)</span><br><span class="line"><span class="comment">//i = append(i, message...)</span></span><br><span class="line">fmt.Println(fmt.Sprintf(<span class="string">&quot;encode protocolPre:%v&quot;</span>, protocolPre))</span><br><span class="line"></span><br><span class="line"><span class="comment">//fmt.Println(i)</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">append</span>(protocolPre, message...), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Decode 解码消息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Decode</span><span class="params">(reader io.Reader)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">/*// 读取消息的长度</span></span><br><span class="line"><span class="comment">lengthByte, _ := reader.Peek(4) // 读取前4个字节的数据</span></span><br><span class="line"><span class="comment">lengthBuff := bytes.NewBuffer(lengthByte)</span></span><br><span class="line"><span class="comment">var length int32</span></span><br><span class="line"><span class="comment">err := binary.Read(lengthBuff, binary.LittleEndian, &amp;length)</span></span><br><span class="line"><span class="comment">if err != nil &#123;</span></span><br><span class="line"><span class="comment">return &quot;&quot;, err</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">// Buffered返回缓冲中现有的可读取的字节数。</span></span><br><span class="line"><span class="comment">if int32(reader.Buffered()) &lt; length+4 &#123;</span></span><br><span class="line"><span class="comment">return &quot;&quot;, err</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 读取真正的消息数据</span></span><br><span class="line"><span class="comment">pack := make([]byte, int(4+length))</span></span><br><span class="line"><span class="comment">_, err = reader.Read(pack)</span></span><br><span class="line"><span class="comment">if err != nil &#123;</span></span><br><span class="line"><span class="comment">return &quot;&quot;, err</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">return string(pack[4:]), nil*/</span></span><br><span class="line">protocolPre := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">4</span>)</span><br><span class="line">_, err := io.ReadFull(reader, protocolPre)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fmt.Println(protocolPre)</span></span><br><span class="line">fmt.Println(fmt.Sprintf(<span class="string">&quot;decode protocolPre:%v&quot;</span>, protocolPre))</span><br><span class="line"></span><br><span class="line">b := <span class="type">int</span>(protocolPre[<span class="number">3</span>])&lt;&lt;<span class="number">24</span> + <span class="type">int</span>(protocolPre[<span class="number">2</span>])&lt;&lt;<span class="number">16</span> + <span class="type">int</span>(protocolPre[<span class="number">1</span>])&lt;&lt;<span class="number">8</span> + <span class="type">int</span>(protocolPre[<span class="number">0</span>])</span><br><span class="line">data := <span class="built_in">make</span>([]<span class="type">byte</span>, b)</span><br><span class="line">_, err = io.ReadFull(reader, data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> data, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20231010002208957.png" alt="image-20231010002208957"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自定义协议&quot;&gt;&lt;a href=&quot;#自定义协议&quot; class=&quot;headerlink&quot; title=&quot;自定义协议&quot;&gt;&lt;/a&gt;自定义协议&lt;/h1&gt;&lt;p&gt;我们有http的协议，有tls协议&lt;/p&gt;
&lt;h4 id=&quot;那我们能不能自己做一个标准协议呢？&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="隧道" scheme="https://cbbboy.github.io/tags/%E9%9A%A7%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>隧道进阶03-处理连接-本地放行+重写目的地址</title>
    <link href="https://cbbboy.github.io/zh-CN/%E9%9A%A7%E9%81%93/%E9%9A%A7%E9%81%93%E8%BF%9B%E9%98%B603-%E5%A4%84%E7%90%86%E8%BF%9E%E6%8E%A5-%E6%9C%AC%E5%9C%B0%E6%94%BE%E8%A1%8C/"/>
    <id>https://cbbboy.github.io/zh-CN/%E9%9A%A7%E9%81%93/%E9%9A%A7%E9%81%93%E8%BF%9B%E9%98%B603-%E5%A4%84%E7%90%86%E8%BF%9E%E6%8E%A5-%E6%9C%AC%E5%9C%B0%E6%94%BE%E8%A1%8C/</id>
    <published>2023-10-12T02:08:59.000Z</published>
    <updated>2023-10-19T12:10:51.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="处理连接-本地放行"><a href="#处理连接-本地放行" class="headerlink" title="处理连接-本地放行"></a>处理连接-本地放行</h1><p>基本流程可以理解为</p><p><img src="/./assets/image-20231019200215613.png" alt="image-20231019200215613"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;处理连接-本地放行&quot;&gt;&lt;a href=&quot;#处理连接-本地放行&quot; class=&quot;headerlink&quot; title=&quot;处理连接-本地放行&quot;&gt;&lt;/a&gt;处理连接-本地放行&lt;/h1&gt;&lt;p&gt;基本流程可以理解为&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/./assets/image</summary>
      
    
    
    
    
    <category term="隧道" scheme="https://cbbboy.github.io/tags/%E9%9A%A7%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>隧道进阶04-点对面隧道协议设计方案</title>
    <link href="https://cbbboy.github.io/zh-CN/%E9%9A%A7%E9%81%93/%E9%9A%A7%E9%81%93%E8%BF%9B%E9%98%B604-%E7%82%B9%E5%AF%B9%E9%9D%A2%E9%9A%A7%E9%81%93%E5%8D%8F%E8%AE%AE%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88/"/>
    <id>https://cbbboy.github.io/zh-CN/%E9%9A%A7%E9%81%93/%E9%9A%A7%E9%81%93%E8%BF%9B%E9%98%B604-%E7%82%B9%E5%AF%B9%E9%9D%A2%E9%9A%A7%E9%81%93%E5%8D%8F%E8%AE%AE%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88/</id>
    <published>2023-10-12T02:08:59.000Z</published>
    <updated>2023-10-19T12:02:03.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="点对面隧道协议设计方案"><a href="#点对面隧道协议设计方案" class="headerlink" title="点对面隧道协议设计方案"></a>点对面隧道协议设计方案</h1><p>我们拿到net.conn了之后，我们即可将流量封装进入隧道</p><p>那我们遇到最大问题肯定是：</p><h4 id="隧道协议的设计"><a href="#隧道协议的设计" class="headerlink" title="隧道协议的设计"></a>隧道协议的设计</h4><p>我们需要先考虑-&gt;隧道服务端需要什么？</p><ol><li>目的ip</li><li>目的端口</li><li>协议</li><li>区分相同目的ip、相同端口、相同协议的不同连接</li><li>流量类型</li></ol><p>1、2、3就不多讲了</p><p>4：是客户端可能会同时和10.50.1.21:8642建立多条tcp连接，那我们服务端也需要多条和真实业务的连接，那我们只有目的ip，目的端口，协议，无法区分多个tcp连接，那我们就还需要一个东西进行区分</p><p>5：为了区分比如tcp新建立连接、tcp断开、tcp数据传递、服务端和客户端双向通信发送的信息、传递自己的令牌等设计的在真实业务里面，我们可以把协议和流量类型合并为同一个字段 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;点对面隧道协议设计方案&quot;&gt;&lt;a href=&quot;#点对面隧道协议设计方案&quot; class=&quot;headerlink&quot; title=&quot;点对面隧道协议设计方案&quot;&gt;&lt;/a&gt;点对面隧道协议设计方案&lt;/h1&gt;&lt;p&gt;我们拿到net.conn了之后，我们即可将流量封装进入隧道&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="隧道" scheme="https://cbbboy.github.io/tags/%E9%9A%A7%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>隧道基础04-ip和掩码</title>
    <link href="https://cbbboy.github.io/zh-CN/%E9%9A%A7%E9%81%93/%E9%9A%A7%E9%81%93%E5%9F%BA%E7%A1%8004-ip%E5%92%8C%E6%8E%A9%E7%A0%81/"/>
    <id>https://cbbboy.github.io/zh-CN/%E9%9A%A7%E9%81%93/%E9%9A%A7%E9%81%93%E5%9F%BA%E7%A1%8004-ip%E5%92%8C%E6%8E%A9%E7%A0%81/</id>
    <published>2023-10-12T02:08:59.000Z</published>
    <updated>2023-10-19T08:24:24.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h1><p>常见ip为，123.249.80.168&#x2F;32，10.50.1.220&#x2F;8，192.168.1.1&#x2F;16</p><p>那后面的32，8，16代表的是什么</p><h3 id="基础01"><a href="#基础01" class="headerlink" title="基础01"></a>基础01</h3><p>123.249.80.168&#x2F;32      32表示匹配整个ip</p><p>10.50.1.220&#x2F;8      8表示匹配10.*</p><p>192.168.1.1&#x2F;16       16表示匹配192.168.*</p><p>那如果是7呢，如果是15呢，如果是31呢？</p><h3 id="基础02"><a href="#基础02" class="headerlink" title="基础02"></a>基础02</h3><p>ip最大值是多少</p><p>255.255.255.255</p><p>为什么是255？</p><p><img src="/./assets/image-20231016165755261.png" alt="image-20231016165755261"></p><p>看二进制，8个1可以是10进制的255，ip是由于32个0或1组成的</p><h3 id="正式内容"><a href="#正式内容" class="headerlink" title="正式内容"></a>正式内容</h3><p>ip和掩码是如何对应的</p><p>ip看成32个0或1组成</p><p>10.50.1.220&#x2F;7是如何匹配的呢？</p><p>7其实真实含义为匹配前7个0或者1，后面的25个可以是任意值（0或1都可以）</p><p><img src="/./assets/image-20231016170436086.png" alt="image-20231016170436086"></p><p>看一下7的二进制是00001010那我们第一位可以是多少呢？</p><p><img src="/./assets/image-20231016170512167.png" alt="image-20231016170512167"></p><p><img src="/./assets/image-20231016170517962.png" alt="image-20231016170517962"></p><p>由此我们计算出10.50.1.220&#x2F;7可以匹配的ip是</p><p>10.*和11.*</p><p>来计算一下10.50.1.220&#x2F;6可以匹配什么ip？</p><p>（答案）</p><p>8.*和9.*和10.*和11.*</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ip&quot;&gt;&lt;a href=&quot;#ip&quot; class=&quot;headerlink&quot; title=&quot;ip&quot;&gt;&lt;/a&gt;ip&lt;/h1&gt;&lt;p&gt;常见ip为，123.249.80.168&amp;#x2F;32，10.50.1.220&amp;#x2F;8，192.168.1.1&amp;#x2F;16&lt;/p</summary>
      
    
    
    
    
    <category term="隧道" scheme="https://cbbboy.github.io/tags/%E9%9A%A7%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>隧道进阶01-点对面隧道</title>
    <link href="https://cbbboy.github.io/zh-CN/%E9%9A%A7%E9%81%93/%E9%9A%A7%E9%81%93%E8%BF%9B%E9%98%B601-%E7%82%B9%E5%AF%B9%E9%9D%A2%E9%9A%A7%E9%81%93%E7%9B%AE%E6%A0%87/"/>
    <id>https://cbbboy.github.io/zh-CN/%E9%9A%A7%E9%81%93/%E9%9A%A7%E9%81%93%E8%BF%9B%E9%98%B601-%E7%82%B9%E5%AF%B9%E9%9D%A2%E9%9A%A7%E9%81%93%E7%9B%AE%E6%A0%87/</id>
    <published>2023-10-12T02:08:59.000Z</published>
    <updated>2023-10-19T08:24:33.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="点对面隧道"><a href="#点对面隧道" class="headerlink" title="点对面隧道"></a>点对面隧道</h1><p>（学习本章之前强烈建议先学习隧道基础02-点对点隧道和隧道基础03-自定义协议）</p><h4 id="点对面隧道基本流程图"><a href="#点对面隧道基本流程图" class="headerlink" title="点对面隧道基本流程图"></a>点对面隧道基本流程图</h4><p><img src="/./assets/image-20231019090857163.png" alt="image-20231019090857163"></p><h4 id="那我们都需要做什么能够达到效果？"><a href="#那我们都需要做什么能够达到效果？" class="headerlink" title="那我们都需要做什么能够达到效果？"></a>那我们都需要做什么能够达到效果？</h4><ol><li><p>启动虚拟网卡</p></li><li><p>启动包gvisor.dev&#x2F;gvisor中用户态处理底层数据包，将数据包转化成我们好操作的net.conn对象</p></li><li><p>拿到对象后根据对象中的 localAddr 和remoteAddr判断是否经过隧道（可能只是想要代理10.50.1.21:22端口，其他端口本地放行，但是路由是不区分端口的，所以需要在代码里面处理本地放行的逻辑）</p></li><li><p>根据自己自定义协议封装进隧道里面发送到服务端</p></li><li><p>服务端根据隧道协议判断数据类型并处理</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;点对面隧道&quot;&gt;&lt;a href=&quot;#点对面隧道&quot; class=&quot;headerlink&quot; title=&quot;点对面隧道&quot;&gt;&lt;/a&gt;点对面隧道&lt;/h1&gt;&lt;p&gt;（学习本章之前强烈建议先学习隧道基础02-点对点隧道和隧道基础03-自定义协议）&lt;/p&gt;
&lt;h4 id=&quot;点对面隧道</summary>
      
    
    
    
    
    <category term="隧道" scheme="https://cbbboy.github.io/tags/%E9%9A%A7%E9%81%93/"/>
    
  </entry>
  
</feed>
